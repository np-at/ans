{{ ansible_managed | comment }}

server:
  http_listen_address: {{ promtail_config_server_listen }}
  http_listen_port: {{ promtail_config_server_port }}
  grpc_listen_address: {{ promtail_config_server_listen }}
  grpc_listen_port: 0
  log_level: {{ promtail_config_log_level }}

# Positions
positions:
  filename: /tmp/positions.yaml

# Loki Server URL
clients:
  - url: http://{{ promtail_config_client_loki_address }}:{{ promtail_config_client_loki_port }}{{ promtail_config_client_loki_path }}
{% if promtail_config_client_set_tenant_id %}
    tenant_id: {{ promtail_config_client_tenant_id }}
{% endif %}
    external_labels:
{% for label_key in promtail_config_client_external_labels %}
      {{ label_key }}: {{ promtail_config_client_external_labels[label_key] }}
{% endfor %}

scrape_configs:
# https://grafana.com/docs/loki/latest/clients/promtail/scraping/#journal-scraping-linux-only
  - job_name: journal
    journal:
      max_age: 12h
      json: false
      path: {{ promtail_config_scrape_journald_path }}
      labels:
        job: journal
    relabel_configs:
      - source_labels: [__journal__systemd_unit]
        target_label: systemd_unit
      - source_labels: [__journal__hostname]
        target_label: nodename
      - source_labels: [__journal_syslog_identifier]
        target_label: syslog_identifier
      - source_labels: [__journal__comm]
        target_label: command
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: varlogs
          __path__: /var/log/*log
    pipeline_stages:
      - match:
          selector: '{name="promtail"}'
          stages:
  # The regex stage parses out a level, timestamp, and component. At the end
  # of the stage, the values for level, timestamp, and component are only
  # set internally for the pipeline. Future stages can use these values and
  # decide what to do with them.
            - regex:
                expression: '.*level=(?P<level>[a-zA-Z]+).*ts=(?P<timestamp>[T\d-:.Z]*).*component=(?P<component>[a-zA-Z]+)'
  # The labels stage takes the level and component entries from the previous
  # regex stage and promotes them to a label. For example, level=error may
  # be a label added by this stage.
            - labels:
                level:
                component:
  # Finally, the timestamp stage takes the timestamp extracted from the
  # regex stage and promotes it to be the new timestamp of the log entry,
  # parsing it as an RFC3339Nano-formatted value.
            - timestamp:
                format: RFC3339Nano
                source: timestamp
